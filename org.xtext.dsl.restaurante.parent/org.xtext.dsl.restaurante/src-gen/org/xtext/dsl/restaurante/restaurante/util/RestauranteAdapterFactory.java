/**
 * generated by Xtext 2.12.0
 */
package org.xtext.dsl.restaurante.restaurante.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.dsl.restaurante.restaurante.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.dsl.restaurante.restaurante.RestaurantePackage
 * @generated
 */
public class RestauranteAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RestaurantePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestauranteAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RestaurantePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RestauranteSwitch<Adapter> modelSwitch =
    new RestauranteSwitch<Adapter>()
    {
      @Override
      public Adapter caseRestaurante(Restaurante object)
      {
        return createRestauranteAdapter();
      }
      @Override
      public Adapter caseIngrediente(Ingrediente object)
      {
        return createIngredienteAdapter();
      }
      @Override
      public Adapter caseProducto(Producto object)
      {
        return createProductoAdapter();
      }
      @Override
      public Adapter casePrincipal(Principal object)
      {
        return createPrincipalAdapter();
      }
      @Override
      public Adapter caseComplemento(Complemento object)
      {
        return createComplementoAdapter();
      }
      @Override
      public Adapter caseBebida(Bebida object)
      {
        return createBebidaAdapter();
      }
      @Override
      public Adapter caseBebidaFria(BebidaFria object)
      {
        return createBebidaFriaAdapter();
      }
      @Override
      public Adapter caseBebidaCaliente(BebidaCaliente object)
      {
        return createBebidaCalienteAdapter();
      }
      @Override
      public Adapter casePostre(Postre object)
      {
        return createPostreAdapter();
      }
      @Override
      public Adapter caseNutricional(Nutricional object)
      {
        return createNutricionalAdapter();
      }
      @Override
      public Adapter caseMenu(Menu object)
      {
        return createMenuAdapter();
      }
      @Override
      public Adapter caseProductoY(ProductoY object)
      {
        return createProductoYAdapter();
      }
      @Override
      public Adapter caseProductoO(ProductoO object)
      {
        return createProductoOAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Restaurante <em>Restaurante</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Restaurante
   * @generated
   */
  public Adapter createRestauranteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Ingrediente <em>Ingrediente</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Ingrediente
   * @generated
   */
  public Adapter createIngredienteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Producto <em>Producto</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Producto
   * @generated
   */
  public Adapter createProductoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Principal <em>Principal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Principal
   * @generated
   */
  public Adapter createPrincipalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Complemento <em>Complemento</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Complemento
   * @generated
   */
  public Adapter createComplementoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Bebida <em>Bebida</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Bebida
   * @generated
   */
  public Adapter createBebidaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.BebidaFria <em>Bebida Fria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.BebidaFria
   * @generated
   */
  public Adapter createBebidaFriaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.BebidaCaliente <em>Bebida Caliente</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.BebidaCaliente
   * @generated
   */
  public Adapter createBebidaCalienteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Postre <em>Postre</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Postre
   * @generated
   */
  public Adapter createPostreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Nutricional <em>Nutricional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Nutricional
   * @generated
   */
  public Adapter createNutricionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.Menu <em>Menu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.Menu
   * @generated
   */
  public Adapter createMenuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.ProductoY <em>Producto Y</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.ProductoY
   * @generated
   */
  public Adapter createProductoYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.dsl.restaurante.restaurante.ProductoO <em>Producto O</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.dsl.restaurante.restaurante.ProductoO
   * @generated
   */
  public Adapter createProductoOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RestauranteAdapterFactory
