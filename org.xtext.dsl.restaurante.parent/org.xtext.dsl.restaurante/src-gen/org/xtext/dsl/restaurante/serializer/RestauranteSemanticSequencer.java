/*
 * generated by Xtext 2.12.0
 */
package org.xtext.dsl.restaurante.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.dsl.restaurante.restaurante.BebidaCaliente;
import org.xtext.dsl.restaurante.restaurante.BebidaFria;
import org.xtext.dsl.restaurante.restaurante.Complemento;
import org.xtext.dsl.restaurante.restaurante.Ingrediente;
import org.xtext.dsl.restaurante.restaurante.Menu;
import org.xtext.dsl.restaurante.restaurante.Nutricional;
import org.xtext.dsl.restaurante.restaurante.Postre;
import org.xtext.dsl.restaurante.restaurante.Principal;
import org.xtext.dsl.restaurante.restaurante.ProductoO;
import org.xtext.dsl.restaurante.restaurante.ProductoY;
import org.xtext.dsl.restaurante.restaurante.Restaurante;
import org.xtext.dsl.restaurante.restaurante.RestaurantePackage;
import org.xtext.dsl.restaurante.services.RestauranteGrammarAccess;

@SuppressWarnings("all")
public class RestauranteSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RestauranteGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestaurantePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestaurantePackage.BEBIDA_CALIENTE:
				sequence_BebidaCaliente(context, (BebidaCaliente) semanticObject); 
				return; 
			case RestaurantePackage.BEBIDA_FRIA:
				sequence_BebidaFria(context, (BebidaFria) semanticObject); 
				return; 
			case RestaurantePackage.COMPLEMENTO:
				sequence_Complemento(context, (Complemento) semanticObject); 
				return; 
			case RestaurantePackage.INGREDIENTE:
				sequence_Ingrediente(context, (Ingrediente) semanticObject); 
				return; 
			case RestaurantePackage.MENU:
				sequence_Menu(context, (Menu) semanticObject); 
				return; 
			case RestaurantePackage.NUTRICIONAL:
				sequence_Nutricional(context, (Nutricional) semanticObject); 
				return; 
			case RestaurantePackage.POSTRE:
				sequence_Postre(context, (Postre) semanticObject); 
				return; 
			case RestaurantePackage.PRINCIPAL:
				sequence_Principal(context, (Principal) semanticObject); 
				return; 
			case RestaurantePackage.PRODUCTO_O:
				sequence_ProductoO(context, (ProductoO) semanticObject); 
				return; 
			case RestaurantePackage.PRODUCTO_Y:
				sequence_ProductoY(context, (ProductoY) semanticObject); 
				return; 
			case RestaurantePackage.RESTAURANTE:
				sequence_Restaurante(context, (Restaurante) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Producto returns BebidaCaliente
	 *     Bebida returns BebidaCaliente
	 *     BebidaCaliente returns BebidaCaliente
	 *
	 * Constraint:
	 *     (name=ID nombre=STRING descripcion=STRING foto=STRING nutricional=Nutricional?)
	 */
	protected void sequence_BebidaCaliente(ISerializationContext context, BebidaCaliente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Producto returns BebidaFria
	 *     Bebida returns BebidaFria
	 *     BebidaFria returns BebidaFria
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         nombre=STRING 
	 *         descripcion=STRING 
	 *         distribuidor=Distribuidor 
	 *         foto=STRING 
	 *         nutricional=Nutricional?
	 *     )
	 */
	protected void sequence_BebidaFria(ISerializationContext context, BebidaFria semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Producto returns Complemento
	 *     Complemento returns Complemento
	 *
	 * Constraint:
	 *     (name=ID nombre=STRING descripcion=STRING foto=STRING nutricional=Nutricional?)
	 */
	protected void sequence_Complemento(ISerializationContext context, Complemento semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ingrediente returns Ingrediente
	 *
	 * Constraint:
	 *     (name=ID nombre=STRING infoURL=URL? foto=STRING? alergenico?='alergenico'?)
	 */
	protected void sequence_Ingrediente(ISerializationContext context, Ingrediente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Menu returns Menu
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         nombre=STRING 
	 *         descripcion=STRING 
	 *         tamanio=TamanioMenu 
	 *         foto=STRING 
	 *         productos=ProductoY?
	 *     )
	 */
	protected void sequence_Menu(ISerializationContext context, Menu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nutricional returns Nutricional
	 *
	 * Constraint:
	 *     (
	 *         cantidad=Float 
	 *         unidad=STRING 
	 *         energia=Float 
	 *         grasas=Float 
	 *         hidratos=Float 
	 *         proteinas=Float 
	 *         sal=Float
	 *     )
	 */
	protected void sequence_Nutricional(ISerializationContext context, Nutricional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__CANTIDAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__CANTIDAD));
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__UNIDAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__UNIDAD));
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__ENERGIA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__ENERGIA));
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__GRASAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__GRASAS));
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__HIDRATOS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__HIDRATOS));
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__PROTEINAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__PROTEINAS));
			if (transientValues.isValueTransient(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__SAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestaurantePackage.Literals.NUTRICIONAL__SAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNutricionalAccess().getCantidadFloatParserRuleCall_2_0(), semanticObject.getCantidad());
		feeder.accept(grammarAccess.getNutricionalAccess().getUnidadSTRINGTerminalRuleCall_4_0(), semanticObject.getUnidad());
		feeder.accept(grammarAccess.getNutricionalAccess().getEnergiaFloatParserRuleCall_6_0(), semanticObject.getEnergia());
		feeder.accept(grammarAccess.getNutricionalAccess().getGrasasFloatParserRuleCall_8_0(), semanticObject.getGrasas());
		feeder.accept(grammarAccess.getNutricionalAccess().getHidratosFloatParserRuleCall_10_0(), semanticObject.getHidratos());
		feeder.accept(grammarAccess.getNutricionalAccess().getProteinasFloatParserRuleCall_12_0(), semanticObject.getProteinas());
		feeder.accept(grammarAccess.getNutricionalAccess().getSalFloatParserRuleCall_14_0(), semanticObject.getSal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Producto returns Postre
	 *     Postre returns Postre
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         nombre=STRING 
	 *         helado?='helado'? 
	 *         descripcion=STRING 
	 *         distribuidor=Distribuidor? 
	 *         foto=STRING 
	 *         (ingredientes+=[Ingrediente|ID] ingredientes+=[Ingrediente|ID]*)? 
	 *         nutricional=Nutricional?
	 *     )
	 */
	protected void sequence_Postre(ISerializationContext context, Postre semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Producto returns Principal
	 *     Principal returns Principal
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         nombre=STRING 
	 *         ensalada?='ensalada'? 
	 *         descripcion=STRING 
	 *         foto=STRING 
	 *         (ingredientes+=[Ingrediente|ID] ingredientes+=[Ingrediente|ID]*)? 
	 *         salsa=SalsaRecomendada 
	 *         nutricional=Nutricional?
	 *     )
	 */
	protected void sequence_Principal(ISerializationContext context, Principal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductoO returns ProductoO
	 *
	 * Constraint:
	 *     (izq=[Producto|ID] | (izq=[Producto|ID] der+=[Producto|ID]*))
	 */
	protected void sequence_ProductoO(ISerializationContext context, ProductoO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductoY returns ProductoY
	 *
	 * Constraint:
	 *     (izq=ProductoO der+=ProductoO*)
	 */
	protected void sequence_ProductoY(ISerializationContext context, ProductoY semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Restaurante returns Restaurante
	 *
	 * Constraint:
	 *     (nombre=STRING fecha=FECHA ingredientes+=Ingrediente* productos+=Producto* menus+=Menu*)
	 */
	protected void sequence_Restaurante(ISerializationContext context, Restaurante semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
