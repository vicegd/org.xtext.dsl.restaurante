/*
* generated by Xtext
*/
package org.xtext.dsl.restaurante.ui.quickfix

import java.text.SimpleDateFormat
import java.util.Calendar
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.xtext.dsl.restaurante.validation.RestauranteValidator

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class RestauranteQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}

	@Fix(RestauranteValidator::NOMBRE_MUY_LARGO)
	def arreglarNombre(Issue issue, IssueResolutionAcceptor acceptor) {	
		acceptor.accept(issue, 'Reducir nombre', 'Se limitará el tamaño de nombre al máximo sugerido', 'ingrediente.ico') [
			context |
			val xtextDocument = context.xtextDocument
			val nombreActual = xtextDocument.get(issue.offset, issue.length) //se toma el nombre del ingrediente que causa el problema
			xtextDocument.replace(issue.offset, issue.length, nombreActual.substring(0,18)+'\'');
		]
	}

	@Fix(RestauranteValidator::FECHA_INVALIDA)
	def arreglarFecha(Issue issue, IssueResolutionAcceptor acceptor) {	
		var formateadorFecha = new SimpleDateFormat("dd-MM-yyyy")
		var calendario = Calendar.getInstance()
		val fecha = formateadorFecha.format(calendario.getTime())

		acceptor.accept(issue, 'Actualizar fecha', 'Se pondrá la fecha de hoy para corregir el problema', 'fecha.png') [
			context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, issue.length, fecha)
		]
	}

	@Fix(RestauranteValidator::EXTENSION_INVALIDA)
	def arreglarExtensionFoto(Issue issue, IssueResolutionAcceptor acceptor) {	
		acceptor.accept(issue, 'Utilizar formato PNG para la imagen', 'Se propondrá un nombre de archivo PNG válido para corregir el problema', 'foto.ico') [
			context |
			val xtextDocument = context.xtextDocument
			val nombreActual = xtextDocument.get(issue.offset, issue.length) //se toma el nombre del archivo que causa el problema
			var indiceExtension = issue.length-1; //en principio no sabemos si tiene extensión el nombre del archivo, ya que si está aquí es que es un nombre NO válido
			if (nombreActual.contains(".")) {
				indiceExtension = nombreActual.lastIndexOf(".")
			}
			val nombreSinExtension = nombreActual.substring(0, indiceExtension) 
			xtextDocument.replace(issue.offset, issue.length, nombreSinExtension + ".png'")
		]
		acceptor.accept(issue, 'Utilizar formato GIF para la imagen', 'Se propondrá un nombre de archivo GIF válido para corregir el problema', 'foto.ico') [
			context |
			val xtextDocument = context.xtextDocument
			val nombreActual = xtextDocument.get(issue.offset, issue.length) //se toma el nombre del archivo que causa el problema
			var indiceExtension = issue.length-1; //en principio no sabemos si tiene extensión el nombre del archivo, ya que si está aquí es que es un nombre NO válido
			if (nombreActual.contains(".")) {
				indiceExtension = nombreActual.lastIndexOf(".")
			}
			val nombreSinExtension = nombreActual.substring(0, indiceExtension) 
			xtextDocument.replace(issue.offset, issue.length, nombreSinExtension + ".gif'")
		]
		acceptor.accept(issue, 'Utilizar formato JPG para la imagen', 'Se propondrá un nombre de archivo JPG válido para corregir el problema', 'foto.ico') [
			context |
			val xtextDocument = context.xtextDocument
			val nombreActual = xtextDocument.get(issue.offset, issue.length) //se toma el nombre del archivo que causa el problema
			var indiceExtension = issue.length-1; //en principio no sabemos si tiene extensión el nombre del archivo, ya que si está aquí es que es un nombre NO válido
			if (nombreActual.contains(".")) {
				indiceExtension = nombreActual.lastIndexOf(".")
			}
			val nombreSinExtension = nombreActual.substring(0, indiceExtension) 
			xtextDocument.replace(issue.offset, issue.length, nombreSinExtension + ".jpg'")
		]
	}

}
