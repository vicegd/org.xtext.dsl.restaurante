/**
 * generated by Xtext
 */
package org.xtext.dsl.restaurante.ui.quickfix;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.xtext.dsl.restaurante.validation.RestauranteValidator;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
@SuppressWarnings("all")
public class RestauranteQuickfixProvider extends DefaultQuickfixProvider {
  @Fix(RestauranteValidator.NOMBRE_MUY_LARGO)
  public void arreglarNombre(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String nombreActual = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
      Integer _offset = issue.getOffset();
      Integer _length = issue.getLength();
      String _substring = nombreActual.substring(0, 18);
      String _plus = (_substring + "\'");
      xtextDocument.replace((_offset).intValue(), (_length).intValue(), _plus);
    };
    acceptor.accept(issue, "Reducir nombre", "Se limitará el tamaño de nombre al máximo sugerido", "ingrediente.ico", _function);
  }
  
  @Fix(RestauranteValidator.FECHA_INVALIDA)
  public void arreglarFecha(final Issue issue, final IssueResolutionAcceptor acceptor) {
    SimpleDateFormat formateadorFecha = new SimpleDateFormat("dd-MM-yyyy");
    Calendar calendario = Calendar.getInstance();
    final String fecha = formateadorFecha.format(calendario.getTime());
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), fecha);
    };
    acceptor.accept(issue, "Actualizar fecha", "Se pondrá la fecha de hoy para corregir el problema", "fecha.png", _function);
  }
  
  @Fix(RestauranteValidator.EXTENSION_INVALIDA)
  public void arreglarExtensionFoto(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String nombreActual = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
      Integer _length = issue.getLength();
      int indiceExtension = ((_length).intValue() - 1);
      boolean _contains = nombreActual.contains(".");
      if (_contains) {
        indiceExtension = nombreActual.lastIndexOf(".");
      }
      final String nombreSinExtension = nombreActual.substring(0, indiceExtension);
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), (nombreSinExtension + ".png\'"));
    };
    acceptor.accept(issue, "Utilizar formato PNG para la imagen", "Se propondrá un nombre de archivo PNG válido para corregir el problema", "foto.ico", _function);
    final IModification _function_1 = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String nombreActual = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
      Integer _length = issue.getLength();
      int indiceExtension = ((_length).intValue() - 1);
      boolean _contains = nombreActual.contains(".");
      if (_contains) {
        indiceExtension = nombreActual.lastIndexOf(".");
      }
      final String nombreSinExtension = nombreActual.substring(0, indiceExtension);
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), (nombreSinExtension + ".gif\'"));
    };
    acceptor.accept(issue, "Utilizar formato GIF para la imagen", "Se propondrá un nombre de archivo GIF válido para corregir el problema", "foto.ico", _function_1);
    final IModification _function_2 = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String nombreActual = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
      Integer _length = issue.getLength();
      int indiceExtension = ((_length).intValue() - 1);
      boolean _contains = nombreActual.contains(".");
      if (_contains) {
        indiceExtension = nombreActual.lastIndexOf(".");
      }
      final String nombreSinExtension = nombreActual.substring(0, indiceExtension);
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), (nombreSinExtension + ".jpg\'"));
    };
    acceptor.accept(issue, "Utilizar formato JPG para la imagen", "Se propondrá un nombre de archivo JPG válido para corregir el problema", "foto.ico", _function_2);
  }
}
